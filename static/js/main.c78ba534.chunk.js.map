{"version":3,"sources":["assets/service.png","constants.js","views/landing-page-view.js","views/components/this-place-is-empty.js","views/components/pagination-list.js","views/components/service-history-list.js","views/components/service-history-details.js","loader.js","views/vehicle-information-view.js","views/vehicle-service-view.js","views/admin-view.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","contractAddress","abi","LandingPageView","state","this","loadBlockChainData","web3","Web3","givenProvider","eth","net","getNetworkType","then","network","console","log","getAccounts","accounts","setState","userAddress","style","height","Row","Col","xs","display","alignItems","justifyContent","options","animationData","searchVehicleAnimation","width","speed","Button","color","onClick","props","history","push","serviceAnimation","React","Component","ThisPlaceIsEmptyComponent","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","textAlign","PaginationList","selectedPage","itemList","numDocumentsInPage","list","length","tempItemList","slice","numOfDocuments","maxPageCount","Math","ceil","paginationItemList","Array","from","v","k","map","item","index","lowerBound","upperBound","PaginationItem","active","PaginationLink","_","renderedItemList","renderItems","Pagination","aria-label","marginTop","previous","next","ServiceHistoryList","serviceHistoryArray","serviceHistoryArrayServiceDate","serviceHistoryArrayServiceAddress","i","serviceHistoryCount","serviceDate","serviceAddress","serviceHistoryIndex","nextProps","nextState","nextContext","cursor","getOperationByServiceHistoryIndex","marginBottom","flexDirection","borderRadius","borderStyle","borderWidth","borderColor","src","service","alt","marginLeft","ServiceHistoryDetails","vehiclePartsArray","detailsArray","selectedServiceHistoryIndex","operations","vehiclePart","detail","size","Loading","loading","Modal","isOpen","ModalBody","type","VehicleInformationView","chassisNumber","contract","Contract","walletAddress","trim","amountToSend","utils","toWei","methods","getCarAndServiceHistoryCustomer","send","value","result","setTimeout","getCarAndServiceHistoryCustomerCallback","call","car","carExists","carDoesNotExists","toast","catch","err","error","alert","getOperationsOfServiceHistoryCustomer","serviceHistoryDetailsVehiclePartsArray","serviceHistoryDetailsDetailsArray","Container","Card","CardBody","Form","FormGroup","Label","for","Input","name","id","placeholder","onChange","e","target","getCarInfo","sm","CardTitle","className","toastClassName","progressClassName","VehicleServiceView","loaded","getService","serviceName","serviceExists","getCarAndServiceHistory","registerCar","isCarCreated","vehicleOperations","now","moment","toString","vehiclePartList","operationDetailsList","vehicleOperation","operationDetail","addOperationsToServiceHistory","isCreatingNewServiceHistory","renderServiceHistoryCreation","getOperationsOfServiceHistory","CardSubtitle","CardText","renderCarDoesNotExists","newOperation","prevState","vehicleOperationsForms","vehiclePartId","operationDescriptionId","padding","fontSize","addNewOperation","saveServiceHistoryAndOperation","pageNotFound","renderServiceFound","renderServiceNotFound","AdminView","isHouseAddress","canSeeAdminPage","userWalletAddress","registerService","isServiceCreated","md","notAllowedAnimation","renderAdminPage","renderNotAdminPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c78ba534.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/service.438b6ef2.png\";","// Audi     0x926387488Fbe109c47f85f38606ACb4008ce2633\n// Mercedes 0x23945Df943b83189E6b20613d97A4526e051ce64\n\nexport const contractAddress = \"0x7390156a2af7641136e4942dbc64e36780e09229\";\nexport const abi = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_date\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_chassisNumber\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_serviceHistoryIndex\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"_vehiclePartList\",\n                \"type\": \"string[]\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"_detailsList\",\n                \"type\": \"string[]\"\n            }\n        ],\n        \"name\": \"addOperationsToServiceHistory\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_chassisNumber\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"getCarAndServiceHistoryCustomer\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_chassisNumber\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"registerCar\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_address\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_serviceName\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_physicalAddress\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"registerService\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_chassisNumber\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"getCarAndServiceHistory\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getCarAndServiceHistoryCustomerCallback\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_chassisNumber\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_serviceHistoryIndex\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getOperationsOfServiceHistory\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_chassisNumber\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_serviceHistoryIndex\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getOperationsOfServiceHistoryCustomer\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            },\n            {\n                \"internalType\": \"string[]\",\n                \"name\": \"\",\n                \"type\": \"string[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getService\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_address\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isHouseAddress\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];","import React from 'react';\nimport {Row, Col, Button} from 'reactstrap';\nimport Lottie from 'lottie-react-web'\nimport \"../App.css\";\nimport serviceAnimation from \"../assets/service.json\";\nimport searchVehicleAnimation from \"../assets/search-vehicle.json\";\nimport Web3 from 'web3';\nimport {abi, contractAddress} from \"../constants\"\n\nclass LandingPageView extends React.Component {\n    state = {};\n\n    componentDidMount() {\n        this.loadBlockChainData();\n    }\n\n    loadBlockChainData() {\n        // Find the Provider\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n        // Get network type (Ropsten or smt. else)\n        web3.eth.net.getNetworkType()\n            .then((network) => {\n                console.log(\"Network: \", network);\n            });\n\n        // Getting account address from metamask\n        web3.eth.getAccounts()\n            .then((accounts) => {\n                console.log(\"Account: \", accounts[0]);\n                this.setState({\n                    userAddress: accounts[0]\n                });\n            });\n\n        // Creating Contract and Calling a Function\n        /*let contract = new web3.eth.Contract(abi, contractAddress);\n        contract.methods.getHouseAddress().call()\n            .then((result) => {\n                console.log(\"getHouseAddress: \", result);\n            });*/\n    }\n\n    render() {\n        return (\n            <div style={{height: '100vh'}}>\n                <Row style={{height: '100vh'}}>\n                    <Col xs=\"6\">\n                        <div style={{\n                            height: '60%',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                        }}>\n                            <Lottie\n                                options={{\n                                    animationData: searchVehicleAnimation,\n                                }}\n                                height={'50%'}\n                                width={'50%'}\n                                speed={0.5}\n                            />\n                        </div>\n                        <div\n                            style={{display: 'flex', justifyContent: 'center'}}>\n                            <Button\n                                color=\"primary\"\n                                onClick={() => this.props.history.push('/be-auto/vehicleInformation')}>\n                                Car Looker\n                            </Button>\n                        </div>\n                    </Col>\n\n                    <Col xs=\"6\">\n                        <div style={{\n                            height: '60%',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                        }}>\n                            <Lottie\n                                options={{\n                                    animationData: serviceAnimation,\n                                }}\n                                height={'85%'}\n                                width={'85%'}\n                                speed={0.4}\n                            />\n                        </div>\n                        <div\n                            style={{display: 'flex', justifyContent: 'center'}}>\n                            <Button\n                                color=\"primary\"\n                                onClick={() => this.props.history.push('/be-auto/vehicleService')}>\n                                Car Service\n                            </Button>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default LandingPageView;\n","import animationData from \"../../assets/629-empty-box\";\nimport Lottie from 'lottie-react-web'\nimport React from \"react\";\n\nexport default class ThisPlaceIsEmptyComponent extends React.Component {\n    render() {\n        const defaultOptions = {\n            loop: true,\n            autoplay: true,\n            animationData: animationData,\n            rendererSettings: {\n                preserveAspectRatio: 'xMidYMid slice'\n            }\n        };\n        return <div>\n            <Lottie options={defaultOptions}\n                    height={200}\n                    width={200} autoplay loop/>\n            <p style={{textAlign: 'center', color: '#c3c8cc'}}>No data found!</p>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Col, Pagination, PaginationItem, PaginationLink} from \"reactstrap\";\n//import moment from \"moment\";\nimport ThisPlaceIsEmptyComponent from \"./this-place-is-empty\";\n\nexport default class PaginationList extends React.Component {\n    state = {\n        selectedPage: 1,\n        itemList: []\n    };\n    numDocumentsInPage = 5;\n\n\n    renderItems(list) {\n    }\n\n    render() {\n        const {itemList} = this.state;\n        if (!itemList || itemList.length === 0)\n            return <ThisPlaceIsEmptyComponent/>;\n        //itemList.sort((a, b) => moment(b.recordDate).isAfter(moment(a.recordDate)));\n        let tempItemList = itemList.slice(\n            (this.state.selectedPage - 1) * this.numDocumentsInPage,\n            this.state.selectedPage * this.numDocumentsInPage);\n\n        let numOfDocuments = itemList.length;\n        let maxPageCount = Math.ceil(numOfDocuments / this.numDocumentsInPage);\n        let foo = Array.from({length: maxPageCount}, (v, k) => k + 1);\n\n        let paginationItemList = foo.map((item, index) => {\n            let lowerBound = this.state.selectedPage - 2;\n            let upperBound = this.state.selectedPage + 2;\n\n            lowerBound = lowerBound < 1 ? 1 : lowerBound;\n            upperBound = upperBound > maxPageCount ? maxPageCount : upperBound;\n\n            if (lowerBound <= item && item <= upperBound) {\n                return (<PaginationItem active={this.state.selectedPage === index + 1}>\n                    <PaginationLink onClick={(_) => this.setState({\n                        selectedPage: index + 1\n                    })}>\n                        {item}\n                    </PaginationLink>\n                </PaginationItem>)\n            }\n        });\n        let renderedItemList = this.renderItems(tempItemList);\n        return (\n            <Col>\n                <div>{renderedItemList}</div>\n                <Pagination aria-label=\"Page navigation example\" style={{marginTop: 10}}>\n                    <PaginationItem>\n                        <PaginationLink previous onClick={(_) => this.setState({\n                            selectedPage: 1\n                        })}/>\n                    </PaginationItem>\n                    {paginationItemList}\n                    <PaginationItem>\n                        <PaginationLink next onClick={(_) => this.setState({\n                            selectedPage: Math.ceil(numOfDocuments / this.numDocumentsInPage)\n                        })}/>\n                    </PaginationItem>\n                </Pagination>\n            </Col>)\n            ;\n    }\n}\n","import React from 'react';\nimport PaginationList from \"./pagination-list\";\nimport moment from \"moment\";\nimport service from '../../assets/service.png'; // Tell webpack this JS file uses this image\n\n\nexport default class ServiceHistoryList extends PaginationList {\n\n    componentDidMount() {\n        let serviceHistoryArray = [];\n        let serviceHistoryArrayServiceDate = this.props.serviceHistoryArrayServiceDate;\n        let serviceHistoryArrayServiceAddress = this.props.serviceHistoryArrayServiceAddress;\n        for (let i = 0; i < this.props.serviceHistoryCount; i++) {\n            serviceHistoryArray.push({\n                serviceDate: serviceHistoryArrayServiceDate[i],\n                serviceAddress: serviceHistoryArrayServiceAddress[i],\n                serviceHistoryIndex: i\n            });\n        }\n\n        this.setState({\n            itemList: serviceHistoryArray,\n            serviceHistoryCount: this.props.serviceHistoryCount\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (this.state.serviceHistoryCount !== nextProps.serviceHistoryCount) {\n            let serviceHistoryArray = [];\n            let serviceHistoryArrayServiceDate = nextProps.serviceHistoryArrayServiceDate;\n            let serviceHistoryArrayServiceAddress = nextProps.serviceHistoryArrayServiceAddress;\n            for (let i = 0; i < nextProps.serviceHistoryCount; i++) {\n                serviceHistoryArray.push({\n                    serviceDate: serviceHistoryArrayServiceDate[i],\n                    serviceAddress: serviceHistoryArrayServiceAddress[i],\n                    serviceHistoryIndex: i\n                });\n            }\n\n            this.setState({\n                itemList: serviceHistoryArray,\n                serviceHistoryCount: nextProps.serviceHistoryCount\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    renderItems(itemList) {\n        return itemList.map((item) => {\n            return <a style={{cursor: 'pointer'}}\n                      onClick={() => this.props.getOperationByServiceHistoryIndex(item.serviceHistoryIndex)}>\n                <div style={{\n                    marginBottom: 16,\n                    flexDirection: 'row',\n                    display: 'flex',\n                    borderRadius: 10,\n                    borderStyle: 'solid',\n                    alignItems: 'center',\n                    cursor: 'pointer',\n                    borderWidth: 1, borderColor: '#eee'\n                }}>\n                    <img src={service} style={{height: 60}} alt=\"Logo\"/>\n                    <div style={{flexDirection: 'column', marginLeft: 4}}>\n                        <div><h5>Service Wallet Address</h5></div>\n                        <div>{item.serviceAddress}</div>\n\n                        <div style={{marginTop: 16}}><h5>Service Visit Date</h5></div>\n                        <div>{item.serviceDate}</div>\n                    </div>\n                </div>\n            </a>\n        });\n    }\n}\n","import React from \"react\";\nimport service from \"../../assets/service.png\";\nimport {GiCarBattery} from \"react-icons/gi\"\n\nexport default class ServiceHistoryDetails extends React.Component {\n    state = {};\n\n    constructor(props) {\n        super(props);\n        this.state.vehiclePartsArray = this.props.vehiclePartsArray;\n        this.state.detailsArray = this.props.detailsArray;\n        this.state.selectedServiceHistoryIndex = this.props.selectedServiceHistoryIndex;\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (this.state.selectedServiceHistoryIndex !== nextProps.selectedServiceHistoryIndex) {\n            this.setState({\n                vehiclePartsArray: nextProps.vehiclePartsArray,\n                detailsArray: nextProps.detailsArray,\n                selectedServiceHistoryIndex: nextProps.selectedServiceHistoryIndex\n            });\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const {vehiclePartsArray, detailsArray} = this.state;\n        if (detailsArray.length === 0)\n            return null;\n\n        let operations = [];\n        for (let i = 0; i < detailsArray.length; i++) {\n            let vehiclePart = vehiclePartsArray[i];\n            let detail = detailsArray[i];\n\n            operations.push(<div style={{\n                flexDirection: 'row',\n                marginBottom: 16,\n                display: 'flex',\n                borderRadius: 10,\n                borderStyle: 'solid',\n                alignItems: 'center',\n                cursor: 'pointer',\n                borderWidth: 1, borderColor: '#eee'\n            }}>\n                <GiCarBattery size={32} style={{marginLeft: 8}}/>\n                <div style={{flexDirection: 'column', marginLeft: 8}}>\n                    <div><h5>Vehicle Part</h5></div>\n                    <div>{vehiclePart}</div>\n\n                    <div style={{marginTop: 16}}><h5>Operation Detail</h5></div>\n                    <div>{detail}</div>\n                </div>\n            </div>)\n        }\n\n        return <div>\n            {operations}\n        </div>\n    }\n}","import {Modal, ModalBody} from \"reactstrap\";\nimport React from \"react\";\nimport Loader from 'react-loader-spinner';\n\nexport default class Loading extends React.Component {\n    render() {\n        const {loading} = this.props;\n        return (\n            <Modal isOpen={loading} style={{width: 130, height: 120}}>\n                <ModalBody>\n                    <Loader\n                        type=\"Bars\"\n                        color=\"#4f539c\"\n                        height={100}\n                        width={100}\n                    />\n                </ModalBody>\n            </Modal>\n        )\n    }\n}\n","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardTitle,\n    Col,\n    Container,\n    Form,\n    FormGroup, Input,\n    Label,\n    Row\n} from \"reactstrap\";\nimport ServiceHistoryList from \"./components/service-history-list\";\nimport ServiceHistoryDetails from \"./components/service-history-details\";\nimport Web3 from \"web3\";\nimport {abi, contractAddress} from \"../constants\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport Loading from \"../loader\";\n\nclass VehicleInformationView extends React.Component {\n    state = {\n        chassisNumber: '',\n        loading: false\n    };\n\n    web3;\n    contract;\n\n    componentDidMount() {\n        this.web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n        this.web3.eth.getAccounts()\n            .then((accounts) => {\n                this.contract = new this.web3.eth.Contract(abi, contractAddress);\n                this.setState({\n                    walletAddress: accounts[0]\n                });\n            });\n    }\n\n    getCarInfo() {\n        const {chassisNumber, walletAddress} = this.state;\n        if (chassisNumber.trim().length === 0) {\n            alert(\"Chassis number cannot be empty\");\n            return;\n        }\n\n        const amountToSend = this.web3.utils.toWei(\"0.01\", \"ether\"); //convert to wei value\n\n        this.setState({\n            loading: true\n        }, () => {\n            this.contract.methods.getCarAndServiceHistoryCustomer(chassisNumber).send({\n                from: walletAddress,\n                value: amountToSend\n            })\n                .then((result) => {\n                    setTimeout(() => {\n                        this.contract.methods.getCarAndServiceHistoryCustomerCallback().call({from: walletAddress})\n                            .then((car) => {\n                                if (car[1]) {\n                                    this.setState({\n                                        loading: false,\n                                        chassisNumber: car[0],\n                                        carExists: car[1],\n                                        serviceHistoryArrayServiceAddress: car[2],\n                                        serviceHistoryArrayServiceDate: car[3],\n                                        serviceHistoryCount: car[4]\n                                    });\n                                } else {\n                                    this.setState({\n                                        loading: false,\n                                        carDoesNotExists: true,\n                                        carExists: false\n                                    }, () => toast('Chassis number does not exists!', {type: 'error'}));\n                                }\n                            })\n                            .catch((err) => {\n                                this.setState({\n                                    loading: false,\n                                    carDoesNotExists: true,\n                                    carExists: false\n                                }, () => toast('Chassis number does not exists!', {type: 'error'}));\n                            });\n                    }, 5000);\n                })\n                .catch((error) => {\n                    this.setState({\n                        loading: false,\n                        carDoesNotExists: true,\n                        carExists: false\n                    }, () => toast('Chassis number does not exists!', {type: 'error'}));\n                });\n        });\n    }\n\n    getOperationByServiceHistoryIndex(index) {\n        const {walletAddress, chassisNumber} = this.state;\n\n        this.setState({\n            loading: true\n        }, () => {\n            this.contract.methods.getOperationsOfServiceHistoryCustomer(chassisNumber, index).call({from: walletAddress})\n                .then((result) => {\n                    console.log(\"getOperationsOfServiceHistory Success!\", result);\n\n                    let vehiclePartsArray = result[0];\n                    let detailsArray = result[1];\n\n                    this.setState({\n                        loading: false,\n                        serviceHistoryDetailsVehiclePartsArray: vehiclePartsArray,\n                        serviceHistoryDetailsDetailsArray: detailsArray,\n                        selectedServiceHistoryIndex: index\n                    });\n                })\n                .catch((err) => {\n                    console.log(\"getOperationsOfServiceHistory Fail!\", err);\n\n                    this.setState({\n                        loading: false,\n                    }, () => toast('Cannot Fetch Service History Details!', {type: 'error'}));\n                });\n        });\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Container>\n                    <Row style={{marginTop: 10}}>\n                        <Col>\n                            <Card>\n                                <CardBody>\n                                    <Form>\n                                        <FormGroup>\n                                            <Label for=\"chasisNumber\">Chassis Number</Label>\n                                            <Input type=\"text\"\n                                                   name=\"chasisNumber\"\n                                                   id=\"chasisNumber\"\n                                                   placeholder=\"1M8GDM9AXKP042788\"\n                                                   value={this.state.chassisNumber}\n                                                   onChange={(e) => this.setState({\n                                                       chassisNumber: e.target.value\n                                                   })}/>\n                                        </FormGroup>\n                                        <Row style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                            <Button color={\"success\"} onClick={() => this.getCarInfo()}>Get Car\n                                                Info</Button>\n                                        </Row>\n                                    </Form>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    {this.state.carExists &&\n                    <Row style={{marginTop: 20}}>\n                        <Col sm={8}>\n                            <Card>\n                                <CardBody>\n                                    <CardTitle><h2>Service History</h2></CardTitle>\n                                    <ServiceHistoryList\n                                        serviceHistoryArrayServiceAddress={this.state.serviceHistoryArrayServiceAddress}\n                                        serviceHistoryArrayServiceDate={this.state.serviceHistoryArrayServiceDate}\n                                        serviceHistoryCount={this.state.serviceHistoryCount}\n                                        getOperationByServiceHistoryIndex={(index) => this.getOperationByServiceHistoryIndex(index)}\n                                    />\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        {this.state.serviceHistoryDetailsVehiclePartsArray && <Col sm={4}>\n                            <Card>\n                                <CardBody>\n                                    <CardTitle><h2>Operations</h2></CardTitle>\n                                    <ServiceHistoryDetails\n                                        selectedServiceHistoryIndex={this.state.selectedServiceHistoryIndex}\n                                        vehiclePartsArray={this.state.serviceHistoryDetailsVehiclePartsArray}\n                                        detailsArray={this.state.serviceHistoryDetailsDetailsArray}/>\n                                </CardBody>\n                            </Card>\n                        </Col>}\n                    </Row>}\n                </Container>\n            </Row>\n            <ToastContainer\n                className='toast-container'\n                toastClassName=\"dark-toast\"\n                progressClassName={'toast-progress-style'}/>\n            <Loading loading={this.state.loading}/>\n        </div>\n    }\n}\n\nexport default VehicleInformationView;","import React from 'react';\nimport Web3 from \"web3\";\nimport {abi, contractAddress} from \"../constants\";\nimport Loading from \"../loader\";\nimport {\n    Col,\n    Card,\n    Container,\n    Row,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n    CardText,\n    Button,\n    FormGroup,\n    Label, Input, Form\n} from \"reactstrap\";\nimport Lottie from \"lottie-react-web\";\nimport pageNotFound from \"../assets/page-not-found.json\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport ServiceHistoryList from \"./components/service-history-list\";\nimport moment from \"moment\";\nimport ServiceHistoryDetails from \"./components/service-history-details\";\n\nclass VehicleServiceView extends React.Component {\n    state = {\n        loading: true,\n        loaded: false,\n        chassisNumber: '',\n    };\n\n    web3;\n    contract;\n\n    componentDidMount() {\n        this.web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n        // \"0x926387488Fbe109c47f85f38606ACb4008ce2633\"\n\n        this.web3.eth.getAccounts()\n            .then((accounts) => {\n                this.contract = new this.web3.eth.Contract(abi, contractAddress);\n                this.contract.methods.getService().call({from: accounts[0]})\n                    .then((service) => {\n                        debugger;\n\n                        console.log(service);\n\n                        this.setState({\n                            loading: false,\n                            loaded: true,\n                            serviceName: service[0],\n                            serviceAddress: service[1],\n                            walletAddress: service[2],\n                            serviceExists: service[3],\n                        });\n                    });\n            });\n    }\n\n    getCarInfo() {\n        const {chassisNumber, walletAddress} = this.state;\n\n        this.setState({\n            loading: true\n        }, () => {\n            this.contract.methods.getCarAndServiceHistory(chassisNumber).call({from: walletAddress})\n                .then((car) => {\n                    if (car[1]) {\n                        this.setState({\n                            loading: false,\n                            chassisNumber: car[0],\n                            carExists: car[1],\n                            serviceHistoryArrayServiceAddress: car[2],\n                            serviceHistoryArrayServiceDate: car[3],\n                            serviceHistoryCount: car[4]\n                        });\n                    } else {\n                        this.setState({\n                            loading: false,\n                            carDoesNotExists: true,\n                            carExists: false\n                        }, () => toast('Chassis number does not exists!', {type: 'error'}));\n                    }\n                })\n                .catch(() => {\n                    this.setState({\n                        loading: false,\n                        carDoesNotExists: true,\n                        carExists: false\n                    }, () => toast('Chassis number does not exists!', {type: 'error'}));\n                });\n        });\n    }\n\n    registerCar() {\n        const {walletAddress, chassisNumber} = this.state;\n\n        this.setState({\n            loading: true\n        }, () => {\n            this.contract.methods.registerCar(chassisNumber).send({from: walletAddress})\n                .then((isCarCreated) => {\n                    console.log(\"Car Registered!\", isCarCreated);\n\n                    this.setState({\n                        loading: false,\n                        carDoesNotExists: false\n                    }, () => toast('Car Registered!', {type: 'success'}));\n                    this.getCarInfo();\n                })\n                .catch((err) => {\n                    console.log(\"Car Registered!\", err);\n\n                    this.setState({\n                        loading: false\n                    }, () => toast('Car already exists!', {type: 'error'}));\n                });\n        });\n    }\n\n    saveServiceHistoryAndOperation() {\n        const {walletAddress, chassisNumber, serviceHistoryCount, vehicleOperations} = this.state;\n        let now = moment().toString();\n\n        let vehiclePartList = [];\n        let operationDetailsList = [];\n        for (const vehicleOperation of vehicleOperations) {\n            vehiclePartList.push(vehicleOperation.vehiclePart);\n            operationDetailsList.push(vehicleOperation.operationDetail);\n        }\n\n        this.setState({\n            loading: true\n        }, () => {\n            this.contract.methods.addOperationsToServiceHistory(now, chassisNumber, serviceHistoryCount, vehiclePartList, operationDetailsList).send({from: walletAddress})\n                .then((result) => {\n                    console.log(\"addOperationsToServiceHistory Success!\", result);\n\n                    this.setState({\n                        loading: false,\n                        isCreatingNewServiceHistory: false,\n                        renderServiceHistoryCreation: false\n                    }, () => toast('Service History Created!', {type: 'success'}));\n                    this.getCarInfo();\n                })\n                .catch((err) => {\n                    console.log(\"addOperationsToServiceHistory Fail!\", err);\n\n                    this.setState({\n                        loading: false,\n                        isCreatingNewServiceHistory: false,\n                    }, () => toast('Service History cannot be Created!', {type: 'error'}));\n                });\n        });\n    }\n\n    getOperationByServiceHistoryIndex(index) {\n        const {walletAddress, chassisNumber} = this.state;\n\n        this.setState({\n            loading: true\n        }, () => {\n            this.contract.methods.getOperationsOfServiceHistory(chassisNumber, index).call({from: walletAddress})\n                .then((result) => {\n                    console.log(\"getOperationsOfServiceHistory Success!\", result);\n\n                    let vehiclePartsArray = result[0];\n                    let detailsArray = result[1];\n\n                    this.setState({\n                        loading: false,\n                        serviceHistoryDetailsVehiclePartsArray: vehiclePartsArray,\n                        serviceHistoryDetailsDetailsArray: detailsArray,\n                        selectedServiceHistoryIndex: index\n                    });\n                })\n                .catch((err) => {\n                    console.log(\"getOperationsOfServiceHistory Fail!\", err);\n\n                    this.setState({\n                        loading: false,\n                    }, () => toast('Cannot Fetch Service History Details!', {type: 'error'}));\n                });\n        });\n    }\n\n    renderCarDoesNotExists() {\n        return (\n            <Col>\n                <div style={{\n                    marginTop: 24,\n                    marginBottom: 8\n                }}>\n                    Would you like to register this Chassis Number as a new car?\n                </div>\n                <Row style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    <Button color={\"primary\"} onClick={() => this.registerCar()}>Register</Button>\n                </Row>\n            </Col>\n        );\n    }\n\n    renderServiceFound() {\n        if (!this.state.loaded)\n            return null;\n\n        const {serviceName, serviceAddress, walletAddress} = this.state;\n\n        return <Row>\n            <Container>\n                <Row style={{marginTop: 10}}>\n                    <Col>\n                        <Card>\n                            <CardBody>\n                                <CardTitle><h2>{serviceName}</h2></CardTitle>\n                                <CardSubtitle>{serviceAddress}</CardSubtitle>\n                                <CardText>{walletAddress}</CardText>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card>\n                            <CardBody>\n                                <Form>\n                                    <FormGroup>\n                                        <Label for=\"chasisNumber\">Chassis Number</Label>\n                                        <Input type=\"text\"\n                                               name=\"chasisNumber\"\n                                               id=\"chasisNumber\"\n                                               placeholder=\"1M8GDM9AXKP042788\"\n                                               value={this.state.chassisNumber}\n                                               onChange={(e) => this.setState({\n                                                   chassisNumber: e.target.value\n                                               })}/>\n                                    </FormGroup>\n                                    <Row style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        <Button color={\"success\"} onClick={() => this.getCarInfo()}>Get Car\n                                            Info</Button>\n                                    </Row>\n                                </Form>\n                                {this.state.carDoesNotExists && !this.state.carExists && this.renderCarDoesNotExists()}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                {this.state.carExists &&\n                <Row style={{marginTop: 20}}>\n                    <Col sm={8}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle><h2>Service History</h2></CardTitle>\n                                <ServiceHistoryList\n                                    serviceHistoryArrayServiceAddress={this.state.serviceHistoryArrayServiceAddress}\n                                    serviceHistoryArrayServiceDate={this.state.serviceHistoryArrayServiceDate}\n                                    serviceHistoryCount={this.state.serviceHistoryCount}\n                                    getOperationByServiceHistoryIndex={(index) => this.getOperationByServiceHistoryIndex(index)}\n                                />\n                                {!this.state.isCreatingNewServiceHistory &&\n                                <Row style={{display: 'flex', justifyContent: 'flex-end', marginTop: 4}}>\n                                    <Button color={\"primary\"}\n                                            onClick={() => {\n                                                this.setState({\n                                                    renderServiceHistoryCreation: true,\n                                                    isCreatingNewServiceHistory: true,\n                                                    vehicleOperations: [{\n                                                        vehiclePart: '',\n                                                        operationDetail: ''\n                                                    }]\n                                                });\n                                            }}>Create Service History</Button>\n                                </Row>}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    {this.state.serviceHistoryDetailsVehiclePartsArray && <Col sm={4}>\n                        <Card>\n                            <CardBody>\n                                <CardTitle><h2>Operations</h2></CardTitle>\n                                <ServiceHistoryDetails\n                                    selectedServiceHistoryIndex={this.state.selectedServiceHistoryIndex}\n                                    vehiclePartsArray={this.state.serviceHistoryDetailsVehiclePartsArray}\n                                    detailsArray={this.state.serviceHistoryDetailsDetailsArray}/>\n                            </CardBody>\n                        </Card>\n                    </Col>}\n                </Row>}\n\n                {this.state.renderServiceHistoryCreation && this.renderServiceHistoryCreation()}\n            </Container>\n        </Row>\n\n    }\n\n    addNewOperation() {\n        let {vehicleOperations} = this.state;\n        let newOperation = {\n            vehiclePart: '',\n            operationDetail: ''\n        };\n\n        this.setState(prevState => ({\n            vehicleOperations: [...prevState.vehicleOperations, newOperation]\n        }));\n    }\n\n    renderServiceHistoryCreation() {\n        if (!this.state.renderServiceHistoryCreation)\n            return null;\n\n        const {vehicleOperations} = this.state;\n        let vehicleOperationsForms = vehicleOperations.map((item, index) => {\n            let vehiclePartId = \"vehiclePart\" + index.toString();\n            let operationDescriptionId = \"operationDescription\" + index.toString();\n\n            return <Card\n                style={{padding: 8, marginBottom: 16}}>\n                <Form>\n                    <FormGroup>\n                        <Label for={vehiclePartId}>Vehicle Part</Label>\n                        <Input type=\"text\"\n                               name={vehiclePartId}\n                               id={vehiclePartId}\n                               placeholder=\"Front Pillar\"\n                               value={vehicleOperations[index].vehiclePart}\n                               onChange={(e) => {\n                                   let {vehicleOperations} = this.state;\n                                   vehicleOperations[index].vehiclePart = e.target.value;\n                                   this.setState({\n                                       vehicleOperations: vehicleOperations\n                                   });\n                               }}/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for={operationDescriptionId}>Operation Description</Label>\n                        <Input type=\"text\"\n                               name={operationDescriptionId}\n                               id={operationDescriptionId}\n                               placeholder=\"Repairment\"\n                               value={vehicleOperations[index].operationDetail}\n                               onChange={(e) => {\n                                   let {vehicleOperations} = this.state;\n                                   vehicleOperations[index].operationDetail = e.target.value;\n                                   this.setState({\n                                       vehicleOperations: vehicleOperations\n                                   });\n                               }}/>\n                    </FormGroup>\n                </Form>\n            </Card>;\n        });\n\n        return (<Row style={{marginTop: 20, width: '50%'}}>\n            <Col>\n                <Card>\n                    <CardBody>\n                        <CardTitle><h2>Operations</h2></CardTitle>\n\n                        {vehicleOperationsForms}\n\n                        <div\n                            style={{width: '100%', textAlign: 'center', fontSize: 12, color: 'blue', cursor: 'pointer'}}\n                            onClick={() => this.addNewOperation()}>\n                            Add New Operation\n                        </div>\n\n                        <Row style={{display: 'flex', justifyContent: 'flex-end', marginTop: 4}}>\n                            <Button color={\"primary\"}\n                                    onClick={() => this.saveServiceHistoryAndOperation()}>Save</Button>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>);\n    }\n\n    renderServiceNotFound() {\n        if (!this.state.loaded)\n            return null;\n\n        return (\n            <Col>\n                <Lottie\n                    options={{\n                        animationData: pageNotFound,\n                    }}\n                    height={'50%'}\n                    width={'50%'}\n                    speed={1.5}\n                />\n                <div\n                    style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                    Service information not found!\n                </div>\n            </Col>\n        );\n    }\n\n    render() {\n        const {serviceExists} = this.state;\n\n        return <div style={{height: '100vh'}}>\n            {serviceExists ? this.renderServiceFound() : this.renderServiceNotFound()}\n            <ToastContainer\n                className='toast-container'\n                toastClassName=\"dark-toast\"\n                progressClassName={'toast-progress-style'}/>\n            <Loading loading={this.state.loading}/>\n        </div>;\n    }\n}\n\nexport default VehicleServiceView;","import React from 'react';\nimport Web3 from \"web3\";\nimport {abi, contractAddress} from \"../constants\";\nimport Loading from \"../loader\";\nimport notAllowedAnimation from \"../assets/not-allowed.json\";\nimport Lottie from \"lottie-react-web\";\nimport {Col, Row, Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport {toast, ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nclass AdminView extends React.Component {\n    state = {\n        loading: true,\n        loaded: false,\n        serviceName: '',\n        serviceAddress: '',\n        walletAddress: ''\n    };\n\n    web3;\n    contract;\n\n    componentDidMount() {\n        this.web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n        this.web3.eth.getAccounts()\n            .then((accounts) => {\n                console.log(\"Account: \", accounts[0]);\n\n                // Creating Contract and Calling a Function\n                this.contract = new this.web3.eth.Contract(abi, contractAddress);\n                this.contract.methods.isHouseAddress(accounts[0]).call()\n                    .then((result) => {\n                        console.log(\"isHouseAddress: \", result);\n\n                        this.setState({\n                            loading: false,\n                            loaded: true,\n                            canSeeAdminPage: result,\n                            userWalletAddress: accounts[0]\n                        });\n                    });\n            });\n    }\n\n    registerService() {\n        const {serviceName, serviceAddress, walletAddress, userWalletAddress} = this.state;\n        if (serviceName.trim() === '' || serviceAddress.trim() === '' || walletAddress.trim() === '') {\n            alert(\"Missing value!\");\n            return;\n        }\n\n        this.setState({\n            loading: true,\n        }, () => {\n            this.contract.methods.registerService(walletAddress, serviceName, serviceAddress).send({from: userWalletAddress})\n                .then((isServiceCreated) => {\n                    console.log(\"Service Created!!!\", isServiceCreated);\n\n                    this.setState({\n                        loading: false\n                    }, () => toast('Service created!', {type: 'success'}));\n                })\n                .catch((err) => {\n                    console.log(\"Service could not be Created!!!\", err);\n\n                    this.setState({\n                        loading: false\n                    }, () => toast('Service could not be created!', {type: 'error'}));\n                })\n        });\n    }\n\n    renderAdminPage() {\n        if (!this.state.loaded)\n            return null;\n\n        return (\n            <div style={{height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                <Col md={4}>\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"exampleAddress\">Service Name</Label>\n                            <Input type=\"text\"\n                                   name=\"address\"\n                                   id=\"exampleAddress\"\n                                   placeholder=\"Opel Değer\"\n                                   value={this.state.serviceName}\n                                   onChange={(e) => this.setState({\n                                       serviceName: e.target.value\n                                   })}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"exampleAddress2\">Physical Address</Label>\n                            <Input type=\"text\"\n                                   name=\"address2\"\n                                   id=\"exampleAddress2\"\n                                   placeholder=\"Girne, Dörtler sokagi No:46, 34852 Maltepe/İstanbul\"\n                                   value={this.state.serviceAddress}\n                                   onChange={(e) => this.setState({\n                                       serviceAddress: e.target.value\n                                   })}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"walletAddress\">Wallet Address</Label>\n                            <Input type=\"text\"\n                                   name=\"wallet\"\n                                   id=\"walletAddress\"\n                                   placeholder=\"0xB60EA5Af63d41D3B2bd127f987C461821b62d8ca\"\n                                   value={this.state.walletAddress}\n                                   onChange={(e) => this.setState({\n                                       walletAddress: e.target.value\n                                   })}/>\n                        </FormGroup>\n                        <Button color={\"success\"} onClick={() => this.registerService()}>Register</Button>\n                    </Form>\n                </Col>\n            </div>\n        );\n    }\n\n    renderNotAdminPage() {\n        if (!this.state.loaded)\n            return null;\n\n        return (\n            <Col>\n                <Lottie\n                    options={{\n                        animationData: notAllowedAnimation,\n                    }}\n                    height={'25%'}\n                    width={'25%'}\n                />\n                <div\n                    style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                    You are not allowed to view this page!\n                </div>\n            </Col>\n        );\n    }\n\n    render() {\n        const {canSeeAdminPage} = this.state;\n\n        return (\n            <div style={{\n                height: '100vh'\n            }}>\n                {canSeeAdminPage ? this.renderAdminPage() : this.renderNotAdminPage()}\n                <ToastContainer\n                    className='toast-container'\n                    toastClassName=\"dark-toast\"\n                    progressClassName={'toast-progress-style'}/>\n                <Loading loading={this.state.loading}/>\n            </div>\n        );\n    }\n}\n\nexport default AdminView;","import React from 'react';\nimport \"./App.css\";\nimport LandingPageView from \"./views/landing-page-view\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport VehicleInformationView from \"./views/vehicle-information-view\";\nimport VehicleServiceView from \"./views/vehicle-service-view\";\nimport AdminView from \"./views/admin-view\";\nimport {ToastContainer} from \"react-toastify\";\n\nconst App = () => (\n    <Router>\n        <div>\n            <Route exact path={'/be-auto/'} component={LandingPageView}/>\n            <Route exact path={'/be-auto/vehicleInformation'} component={VehicleInformationView}/>\n            <Route exact path={'/be-auto/vehicleService'} component={VehicleServiceView}/>\n            <Route exact path={'/be-auto/admin'} component={AdminView}/>\n        </div>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}